name: Deploy Application

on:
    push:
        branches:
            - main # Автодеплой при коммите в main

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20.x'

            - name: Install SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
              shell: bash

            - name: Add known hosts
              run: ssh-keyscan ${{ vars.SERVER_IP }} >> ~/.ssh/known_hosts

            - name: Install MongoDB if not present
              run: |
                  ssh -o StrictHostKeyChecking=no root@${{ vars.SERVER_IP }} << 'EOF'
                    if ! [ -x "$(command -v mongo)" ]; then
                      wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
                      echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
                      sudo apt update
                      sudo apt install -y mongodb-org
                      sudo systemctl start mongod
                      sudo systemctl enable mongod
                    fi
                  EOF

            - name: Install Nginx and configure
              run: |
                  ssh -o StrictHostKeyChecking=no root@${{ vars.SERVER_IP }} << 'EOF'
                    # Установка Nginx, если он не установлен
                    if ! [ -x "$(command -v nginx)" ]; then
                      sudo apt update
                      sudo apt install -y nginx
                      sudo systemctl enable nginx
                    fi

                    # Настройка Nginx для приложения
                    sudo tee /etc/nginx/sites-available/default <<EOL
                    server {
                        listen 80;
                        server_name ${{ vars.SERVER_DOMAIN }};

                        # Редирект HTTP на HTTPS
                        return 301 https://\$host\$request_uri;
                    }

                    server {
                        listen 443 ssl;
                        server_name ${{ vars.SERVER_DOMAIN }};

                        ssl_certificate /etc/letsencrypt/live/${{ vars.SERVER_DOMAIN }}/fullchain.pem;
                        ssl_certificate_key /etc/letsencrypt/live/${{ vars.SERVER_DOMAIN }}/privkey.pem;
                        include /etc/letsencrypt/options-ssl-nginx.conf;
                        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

                        # Проксирование запросов на API (NestJS)
                        location /api/ {
                            proxy_pass http://localhost:${{ vars.SERVER_PORT }};
                            proxy_http_version 1.1;
                            proxy_set_header Upgrade \$http_upgrade;
                            proxy_set_header Connection "upgrade";
                            proxy_set_header Host \$host;
                            proxy_cache_bypass \$http_upgrade;
                        }

                        # Проксирование WebSocket запросов
                        location /ws/ {
                            proxy_pass http://localhost:${{ vars.SERVER_PORT }};
                            proxy_http_version 1.1;
                            proxy_set_header Upgrade \$http_upgrade;
                            proxy_set_header Connection "upgrade";
                            proxy_set_header Host \$host;
                            proxy_cache_bypass \$http_upgrade;
                        }

                        # Обработка запросов на фронтенд (Vue)
                        location / {
                            root /var/www/${{ vars.SERVER_DOMAIN }}/client;
                            try_files \$uri \$uri/ /index.html;
                        }
                    }
                  EOF
                  # Перезапуск Nginx для применения новых настроек
                  sudo nginx -t && sudo systemctl restart nginx

            - name: Install and configure SSL (Certbot)
              run: |
                  ssh -o StrictHostKeyChecking=no root@${{ vars.SERVER_IP }} << 'EOF'
                    # Установка Certbot, если он не установлен
                    if ! [ -x "$(command -v certbot)" ]; then
                      sudo apt update
                      sudo apt install -y certbot python3-certbot-nginx
                    fi

                    # Получение и настройка SSL-сертификатов через Certbot
                    sudo certbot --nginx --non-interactive --agree-tos --email your_email@example.com -d ${{ vars.SERVER_DOMAIN }}

                    # Проверка успешности установки сертификатов
                    sudo nginx -t && sudo systemctl reload nginx
                  EOF

            # Step 3: Install necessary dependencies on the server (git, node, pm2)
            # - name: Install dependencies on server
            #   run: |
            #       ssh -o StrictHostKeyChecking=no root@${{ vars.SERVER_IP }} << 'EOF'
            #           # Install Git
            #           apt-get update
            #           apt-get install -y git

            #           # Install Node.js
            #           curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            #           sudo apt-get install -y nodejs

            #           # Ensure npm and node are available globally
            #           export PATH=$PATH:/usr/bin/node:/usr/bin/npm

            #           # Install PM2 globally
            #           npm install pm2@latest -g

            #           # Verify installations
            #           git --version
            #           node -v
            #           npm -v
            #           pm2 -v
            #       EOF

            - name: Deploy Application
              run: |
                  ssh -o StrictHostKeyChecking=no root@${{ vars.SERVER_IP }} << 'EOF'
                    set -e
                    
                    # Backend deploy (NestJS)
                    mkdir -p /var/www/${{ vars.SERVER_DOMAIN }}
                    cd /var/www/${{ vars.SERVER_DOMAIN }}
                    
                    if [ ! -d ".git" ]; then
                        git clone git@github.com:AnotherStar/AIQuiz.git
                    else
                        git pull origin main
                    fi

                    cd /var/www/${{ vars.SERVER_DOMAIN }}/server
                    npm install
                    npm run build
                    pm2 restart server || pm2 start dist/main.js --name server

                    # Frontend deploy (Vue.js)
                    cd /var/www/${{ vars.SERVER_DOMAIN }}/client
                    npm install
                    rm -rf /var/www/${{ vars.SERVER_DOMAIN }}/client/dist
                    npm run build

                    cd /var/www/${{ vars.SERVER_DOMAIN }}
                    npm i pm2
                    pm2 reload ecosystem.config.js

                    # Перезапуск Nginx для обслуживания нового фронтенда
                    sudo systemctl restart nginx
                  EOF
